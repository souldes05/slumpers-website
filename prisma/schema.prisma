// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tickets   Ticket[]
  orders    Order[]
  bookings  Booking[]

  @@map("users")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  venue       String
  price       Float
  capacity    Int
  available   Int
  image       String?
  status      EventStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tickets Ticket[]

  @@map("events")
}

model Ticket {
  id           String       @id @default(cuid())
  ticketNumber String       @unique
  qrCode       String
  barcode      String
  status       TicketStatus @default(VALID)
  usedAt       DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  userId  String
  user    User   @relation(fields: [userId], references: [id])
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  @@map("tickets")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  images      String[]
  category    Category
  gender      Gender
  sizes       Size[]
  stock       Int
  status      ProductStatus @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  total         Float
  status        OrderStatus @default(PENDING)
  paymentMethod String
  paymentId     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float
  size     Size?

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Booking {
  id          String        @id @default(cuid())
  eventType   String
  date        DateTime
  notes       String?
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("bookings")
}

enum Role {
  USER
  ADMIN
}

enum EventStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

enum TicketStatus {
  VALID
  USED
  CANCELLED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum Category {
  TSHIRT
  HOODIE
  CAP
  ACCESSORY
}

enum Gender {
  MEN
  WOMEN
  UNISEX
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
